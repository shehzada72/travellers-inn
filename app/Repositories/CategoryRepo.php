<?php
/**
 * Created by PhpStorm.
 * User: soft
 * Date: 5/26/2017
 * Time: 6:07 PM
 */

namespace App\Repositories;

use App\Models\Category;
use App\Repositories\Contracts\ICategoryRepo;
use App\Utils\Globals\AppGlobal;

class CategoryRepo extends BaseRepo implements ICategoryRepo
{
    /**
     * CategoryRepo constructor.
     * @param Category $model
     */
    public function __construct(Category $model)
    {
        parent::__construct($model);
    }

    public function fetchCategories(array $params = [])
    {
        // TODO: Implement fetchCategories() method.
    }

    public function fetchContentTypes(array $params = [])
    {
        $contentTypesFromCategory = $this->model
            ->where(array('title' => AppGlobal::CONTENT_TYPE_PARENT))->first();

        $contentTypes = $contentTypesFromCategory->getDescendantsAndSelf();

        return $contentTypes;
    }

    public function fetchDestinations(array $params = [])
    {
        $continentTypesFromCategory = $this->model
            ->where(array('title' => AppGlobal::DESTINATION_PARENT))->first();

        $destinations = $continentTypesFromCategory->getDescendantsAndSelf();

        return $destinations;
    }

    public function fetchCategoryWithAllChildByTitle(array $params = [])
    {
        $title = $params['title'];
        $category = $this->model
            ->where(['title' => $title])->first();

        $allChildes = $category->getDescendantsAndSelf();

        return $allChildes;
    }

    public function fetchCategoryWithImmediateChildByTitle(array $params = [])
    {
        $title = $params['title'];
        $category = $this->model
            ->where(['title' => $title])->first();

        $allChildes = $category->getImmediateDescendants();

        return $allChildes;
    }

    public function fetchPostsByCategoryTitle(array $params = [])
    {
        $category = Category::where('title' , $params['title'])->first();

        $resultPosts = [];
        $childs = $category->getDescendantsAndSelf();

        foreach ($childs as $child)
        {
            $posts = $child->posts;

            foreach ($posts as $post)
            {
                if ($post)
                {
                    $resultPosts[] = $post;
                }
            }
        }
        return $resultPosts;
    }

    public function fetchPostsByCategoryId(array $params = [])
    {
        $category = $this->find($params['id']);

        $resultPosts = [];
        $childs = $category->getDescendantsAndSelf();

        foreach ($childs as $child)
        {
            $posts = $child->posts;

            foreach ($posts as $post)
            {
                if ($post)
                {
                    $resultPosts[] = $post;
                }
            }
        }
        return $resultPosts;
    }

    public function fetchCategoryNameById($id)
    {
        $category = Category::Where('id', 'LIKE', '%' . $id . '%')->first();

        $categoryName = $category->title;

        return $categoryName;
    }

    public function update(array $attributes = [], array $options = [])
    {
        $category = $this->find($options['id']);
        $category->fill($attributes);
        $category->save();
        return parent::update($attributes, $options); // TODO: Change the autogenerated stub
    }
}