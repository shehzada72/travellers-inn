<?php
/**
 * Created by PhpStorm.
 * User: Shehz
 * Date: 17-Jun-17
 * Time: 8:36 PM
 */

namespace App\Repositories;


use App\Models\Role;
use App\Repositories\Contracts\IRoleRepo;
use App\Utils\Globals\AppGlobal;

class RoleRepo extends BaseRepo implements IRoleRepo
{


    /**
     * RoleRepo constructor.
     * @param Role $model
     */
    public function __construct(Role $model)
    {
        parent::__construct($model);
    }

    public function fetchRoles(array $params = [])
    {
        // TODO: Implement fetchRoles() method.
    }

    public function all($columns = array('*'))
    {
        $limit = isset($columns['limit']) ? $columns['limit'] : AppGlobal::DEFAULT_LIMIT;
        $query = $this->model->select('roles.*');
        if (isset($columns['searchKey']))
        {
            $query->where('name', 'LIKE', '%'. $columns['searchKey']. '%')
                ->orWhere('name', 'LIKE', '%'. $columns['searchKey']. '%');
        }

        if (isset($columns['orderBy']) && is_array($columns['orderBy']))
        {
            $colName = $columns['orderBy'][0];
            $orderType = $columns['orderBy'][1];

            $query->orderBy($colName, $orderType);
        }

        return $query->paginate($limit);
//        return parent::all($columns); // TODO: Change the autogenerated stub
    }

    /**
     * @param array $attributes
     * @param array $options
     * @return bool|void
     */
    public function update(array $attributes = [], array $options = [])
    {
        $role = $this->find($options['id']);
        $role->fill($attributes);
        $role->save();
    }

    public function findByName($name)
    {
        $role = Role::where('name', $name)->first();
        return $role;
    }
}